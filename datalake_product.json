{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Datalakes Repeatable Play Template",
    "Parameters": 
    {
        "DatalakePortfolioCFNStack":
        {
            "Type": "String",
            "Description": "Name of the cloudformation stack for datalake portfolio creation",
            "Default": "datalake-portfolio"
        },
        "VPCCIDR": 
        {
            "Default" : "10.100.0.0/16",
            "Description" : "CIDR block for entire VPC",
            "Type" : "String"
        },
        "RawS3Bucket": 
        {
            "Type": "String",
            "Description": "S3 Bucket containing raw data",
            "Default":  "dlrp-neast1-raw-zone"
        },
        "CuratedS3Bucket": 
        {
            "Type": "String",
            "Description": "S3 Bucket to store processed data",
            "Default":  "dlrp-neast1-curated-zone"  
        },
        "GlueScriptLocation": {
            "Type": "String",
            "Default": "dlrp-glue-scripts-us-east-1-<userid>"
        },
        "SampleDBUsername": 
        {
            "NoEcho": "true",
            "Description": "Username for MySQL database access",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "16",
            "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
            "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters.",
            "Default" : "admin"
        },
        "SampleDBPassword": 
        {
            "NoEcho": "true",
            "Description": "Password MySQL database access",
            "Type": "String",
            "MinLength": "8",
            "MaxLength": "41",
            "AllowedPattern": "[a-zA-Z0-9]*",
            "ConstraintDescription": "must contain only alphanumeric characters.",
            "Default": "password"
        },
       
        "DBSubnet1": 
        {
            "Description": "CIDR Block for hosting RDS MySQL DB for sample data",
            "Type": "String",
            "Default": "10.100.25.0/24"
        },
        "DBSubnet1AZ": 
        {
            "Description" : "Availability Zone for DBSubnet",
            "Type" : "String",
            "Default" : "us-east-1a"
        },
        "DBSubnet2": 
        {
            "Description": "CIDR Block for hosting RDS MySQL DB for sample data",
            "Type": "String",
            "Default": "10.100.26.0/24"
        },
        "DBSubnet2AZ": 
        {
            "Description" : "Availability Zone for DBSubnet",
            "Type" : "String",
            "Default" : "us-east-1b"
        }
        
         
    },
    "Resources": 
    {
        "IGW": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "DMSIGW"
                    }
                ]
            }
        },
        "RawBucketS3": 
        {
            "Type": "AWS::S3::Bucket",
            "Properties": 
            {
            
                "BucketName":
                {
                   
                    "Fn::Join": ["", [{"Ref" : "RawS3Bucket"},"-",!Select [0, !Split [-, !Select [2, !Split [/, !Ref AWS::StackId ]]]]]]
                    
                    
                }
            }            
        },
        "ProcessedBucketS3": 
        {
            "Type": "AWS::S3::Bucket",
            "Properties": 
            {
                "BucketName":
                {
                    "Fn::Join": ["", [{"Ref" : "CuratedS3Bucket"},"-",!Select [0, !Split [-, !Select [2, !Split [/, !Ref AWS::StackId ]]]]]]
                    
                }
            }
        },
        "VPC" : 
        {
            "Type" : "AWS::EC2::VPC",
            "Properties" : 
            {
                "EnableDnsSupport" : "true",
                "EnableDnsHostnames" : "true",
                "CidrBlock" : 
                { 
                    "Ref" : "VPCCIDR" 
                },
                "Tags" : 
                [
                    { 
                        "Key" : "Application", 
                        "Value" : 
                        { 
                            "Ref" : "AWS::StackName" 
                        } 
                    },
                    { 
                        "Key" : "Network", 
                        "Value" : "Databases"
                    }
                ]
            }
        },
        "SubnetDB1" : 
        {
            "Type" : "AWS::EC2::Subnet",
            "Properties" : 
            {
                "VpcId" : 
                { 
                    "Ref" : "VPC" 
                },
                "AvailabilityZone" : 
                { 
                    "Ref" : "DBSubnet1AZ" 
                },
                "CidrBlock" : 
                { 
                    "Ref" : "DBSubnet1"
                },
                "Tags" : 
                [
                    { 
                        "Key" : "Application", 
                        "Value" : 
                        { 
                            "Ref" : "AWS::StackName" 
                        } 
                    },
                    { 
                        "Key" : "Network", 
                        "Value" : "Database" 
                    }
                ]
            }
        },
        "SubnetDB2" : 
        {
            "Type" : "AWS::EC2::Subnet",
            "Properties" : 
            {
                "VpcId" : 
                { 
                    "Ref" : "VPC" 
                },
                "AvailabilityZone" : 
                { 
                    "Ref" : "DBSubnet2AZ" 
                },
                "CidrBlock" : 
                { 
                    "Ref" : "DBSubnet2"
                },
                "Tags" : 
                [
                    { 
                        "Key" : "Application", 
                        "Value" : 
                        { 
                            "Ref" : "AWS::StackName" 
                        } 
                    },
                    { 
                        "Key" : "Network", 
                        "Value" : "Database" 
                    }
                ]
            }
        },
       
        "RDSSecurityGroup" : 
        {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : 
            {
                "GroupDescription" : "Enable access to RDS",
                "VpcId" : 
                {
                    "Ref" : "VPC" 
                },
                "SecurityGroupIngress" : 
                [ 
                    { 
                        "IpProtocol" : "tcp",
                        "FromPort" : "3306",  
                        "ToPort" : "3306",
                        "CidrIp" : "0.0.0.0/0"
                        
                    }
                ]
            }
        },
        "RDSSecurityGroupIngress": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "DependsOn": "RDSSecurityGroup",
            "Properties": {
              "GroupId": { "Ref": "RDSSecurityGroup" },
              "IpProtocol": "tcp",
              "FromPort": "0",
              "ToPort": "65535",
              "SourceSecurityGroupId": { "Ref": "RDSSecurityGroup" }
            }
        },
        "RDSSubnetGroup" : 
        {
            "Type" : "AWS::RDS::DBSubnetGroup",
            "Properties" : 
            {
                "DBSubnetGroupDescription" : "For RDS Database",
                
                "SubnetIds" : 
                [ 
                    { 
                        "Ref" : "SubnetDB1" 
                    },
                    { 
                        "Ref" : "SubnetDB2" 
                    }
                ]
            }
        },
        "MySQLDB": 
        {
            "Type": "AWS::RDS::DBInstance",
            "Properties": 
            {
                "DBInstanceIdentifier": "MySQLDBinstance",
                "DBName": "MySQLdatabase",
                "DBInstanceClass": "db.m5.large",
                "AllocatedStorage": "50",
                "Engine": "MySQL", 
                "EngineVersion": "5.7.33" ,
                "VPCSecurityGroups" : 
                [ 
                    { 
                        "Ref" : "RDSSecurityGroup" 
                    } 
                ],
                "AvailabilityZone": {"Ref" :  "DBSubnet1AZ" },
                "DBSubnetGroupName": 
                { 
                    "Ref": "RDSSubnetGroup" 
                },
                "MasterUsername": 
                { 
                    "Ref": "SampleDBUsername" 
                },
                "MasterUserPassword": 
                { 
                    "Ref": "SampleDBPassword" 
                }
            }  
        },
        "RDSConnectionMySQL": {
            "Type": "AWS::Glue::Connection",
            "Properties": {
                "CatalogId": { "Ref": "AWS::AccountId" } ,
                "ConnectionInput": { 
                    "Description": "Connection to MySQL database.",
                    "ConnectionType": "JDBC",
                    "PhysicalConnectionRequirements": 
                    {
                        "AvailabilityZone" : "us-east-1a",
                        "SecurityGroupIdList" : [{ "Ref" :  "RDSSecurityGroup" }] ,
                        "SubnetId" : { "Ref" : "SubnetDB1" }
                    },
                    "ConnectionProperties": {
                        "JDBC_CONNECTION_URL": { "Fn::Sub": [ "jdbc:mysql://${Domain}:3306/census", { "Domain": { "Fn::GetAtt" : ["MySQLDB", "Endpoint.Address" ]} } ]},
                        "USERNAME":  { "Ref" : "SampleDBUsername" },
                        "PASSWORD":  { "Ref" : "SampleDBPassword" } 
                    }
                }
            }
        },
        "GlueRDSCrawler": {
            "Type" : "AWS::Glue::Crawler",
            "Properties" : {
               
                "DatabaseName" : { "Ref" : "GlueDatabaseMysql"},
                "Description" : "AWS Glue crawler to crawl Mysql data",
                "Role" : { "Ref" :  "GlueWorkflowRole" } ,
                "Targets" : {
                    "JdbcTargets": [{
                        "ConnectionName": { "Ref":  "RDSConnectionMySQL" },
                        "Path":  "census/manufacturers_census_data" 

                    }]
                },
                "SchemaChangePolicy": { 
                    "UpdateBehavior": "UPDATE_IN_DATABASE",
                    "DeleteBehavior": "LOG"  
                }  
            }
        },
        "GlueRDSJob": {
            "Type": "AWS::Glue::Job",
            "Properties": {
                "Command": {
                    "Name": "glueetl",
                    "ScriptLocation":  { "Fn::Join" :  ["/" , [ "s3:/" , {"Fn::ImportValue":{"Fn::Sub" : "${DatalakePortfolioCFNStack}-GlueScriptsS3Bucket"}} , "dlrp-mysql-job" ]]}
                },
                "DefaultArguments": {
                    "--job-bookmark-option": "job-bookmark-enable"
                },
                "ExecutionProperty": {
                    "MaxConcurrentRuns": 1
                },
                "MaxRetries": 0,
                "GlueVersion" : "3.0",
                "Role": {
                    "Ref": "GlueWorkflowRole"
                },
                "Connections": {
                    "Connections":[{ "Ref" : "RDSConnectionMySQL" }]
                }
            }
        },
        "LakeCuratedZoneCrawler": {
            "Type" : "AWS::Glue::Crawler",
            "Properties" : {
               
                "DatabaseName" : { "Ref" : "GlueDatabaseMysql"},
                "Description" : "AWS Glue crawler to crawl RDS curated data",
                "Role" : { "Ref" :  "GlueWorkflowRole" } ,
                "Targets" : {
                    "S3Targets": [{
                        "Path": { "Fn::Join" :  ["/" , [ "s3:/" , {"Fn::Join": ["", [{"Ref" : "CuratedS3Bucket"},"-",!Select [0, !Split [-, !Select [2, !Split [/, !Ref AWS::StackId ]]]]]] }, "census", "manufacturers_census_data" ]]}
                    }]
                },
                "SchemaChangePolicy": { 
                    "UpdateBehavior": "UPDATE_IN_DATABASE",
                    "DeleteBehavior": "LOG"  
                },
                "Configuration": "{\"Version\":1.0,\"CrawlerOutput\":{\"Partitions\":{\"AddOrUpdateBehavior\":\"InheritFromTable\"},\"Tables\":{\"AddOrUpdateBehavior\":\"MergeNewColumns\"}}}"

            }
        },
        "LakeS3RawZoneCrawler": {
            "Type" : "AWS::Glue::Crawler",
            "Properties" : {
               
                "DatabaseName" : { "Ref" : "GlueDatabaseMysql"},
                "Description" : "AWS Glue crawler to crawl S3 raw data",
                "Role" : { "Ref" :  "GlueWorkflowRole" } ,
                "Targets" : {
                    "S3Targets": [{
                        "Path": { "Fn::Join": ["", [{"Ref" : "RawS3Bucket"},"-",!Select [0, !Split [-, !Select [2, !Split [/, !Ref AWS::StackId ]]]]]] } 
                    }]
                },
                "SchemaChangePolicy": { 
                    "UpdateBehavior": "UPDATE_IN_DATABASE",
                    "DeleteBehavior": "LOG"  
                },
                "Configuration": "{\"Version\":1.0,\"CrawlerOutput\":{\"Partitions\":{\"AddOrUpdateBehavior\":\"InheritFromTable\"},\"Tables\":{\"AddOrUpdateBehavior\":\"MergeNewColumns\"}}}"
            }
        },
        "GlueS3CuratedzoneJob": {
            "Type": "AWS::Glue::Job",
            "Properties": {
                "Command": {
                    "Name": "glueetl",
                    "ScriptLocation":  { "Fn::Join" :  ["/" , [ "s3:/" , {"Fn::ImportValue":{"Fn::Sub" : "${DatalakePortfolioCFNStack}-GlueScriptsS3Bucket"}} , "dlrp-s3-job" ]]}
                },
                "DefaultArguments": {
                    "--job-bookmark-option": "job-bookmark-enable"
                },
                "ExecutionProperty": {
                    "MaxConcurrentRuns": 1
                },
                "GlueVersion" : "3.0",
                "MaxRetries": 0,
                "Role": {
                    "Ref": "GlueWorkflowRole"
                },
                "Connections": {
                    "Connections": [{ "Ref" : "RDSConnectionMySQL" } ]
                }
            }
        },
        "LakeS3CuratedZoneCrawler": {
            "Type" : "AWS::Glue::Crawler",
            "Properties" : {
               
                "DatabaseName" : { "Ref" : "GlueDatabaseMysql"},
                "Description" : "AWS Glue crawler to crawl S3 curated data",
                "Role" : { "Ref" :  "GlueWorkflowRole" } ,
                "Targets" : {
                    "S3Targets": [{
                        "Path": { "Fn::Join": ["", [{"Ref" : "CuratedS3Bucket"},"-",!Select [0, !Split [-, !Select [2, !Split [/, !Ref AWS::StackId ]]]]]] } 
                    }]
                },
                "SchemaChangePolicy": { 
                    "UpdateBehavior": "UPDATE_IN_DATABASE",
                    "DeleteBehavior": "LOG"  
                },
                "Configuration": "{\"Version\":1.0,\"CrawlerOutput\":{\"Partitions\":{\"AddOrUpdateBehavior\":\"InheritFromTable\"},\"Tables\":{\"AddOrUpdateBehavior\":\"MergeNewColumns\"}}}"
            }
        },
        "AthenaSchoolsNamedQuery": {
            "Type" :  "AWS::Athena::NamedQuery",
            "Properties" : {
                "Name" :  "CensusSchoolsDataQuery",
                "Database" : { "Ref" :  "GlueDatabaseMysql" }, 
                "Description" :  "query to get  schools data" ,
                "QueryString" : "SELECT * FROM schools_data limit 10;" 
            }
        },
        "AthenaManufacturersNamedQuery": {
            "Type" :  "AWS::Athena::NamedQuery",
            "Properties" : {
                "Name" :  "CensusManufacturersQuery",
                "Database" : { "Ref" :  "GlueDatabaseMysql" }, 
                "Description" :  "query to get  manufacturers census data" ,
                "QueryString" : "SELECT * FROM manufacturers_census_data limit 10;" 
            }
        },

        "EC2Instance": {
            "Type": "AWS::EC2::Instance",
            "DependsOn": "MySQLDB",
            "Properties": {
                "DisableApiTermination": "false",
                "InstanceInitiatedShutdownBehavior": "stop",
                "EbsOptimized": "true",
                "ImageId": "ami-0c2b8ca1dad447f8a",
                "InstanceType": "t3.2xlarge",
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "Content-Type: multipart/mixed; boundary=\"//\"\n",
                                "MIME-Version: 1.0\n",
                                "\n",
                                "--//\n",
                                "Content-Type: text/cloud-config; charset=\"us-ascii\"\n",
                                "MIME-Version: 1.0\n",
                                "Content-Transfer-Encoding: 7bit\n",
                                "Content-Disposition: attachment; filename=\"cloud-config.txt\"\n",
                                "\n",
                                "#cloud-config\n",
                                "cloud_final_modules:\n",
                                "- [scripts-user, always]\n",
                                "\n",
                                "--//\n",
                                "Content-Type: text/x-shellscript; charset=\"us-ascii\"\n",
                                "MIME-Version: 1.0\n",
                                "Content-Transfer-Encoding: 7bit\n",
                                "Content-Disposition: attachment; filename=\"userdata.txt\"\n",
                                "\n",
                                "#!/bin/bash -xe\n",
                                "yum install -y mysql\n",
                                "yum install -y git\n",
                                "yum update -y\n",
                                "cd /home/ec2-user\n",
                                "DIR=\"mysql-census-data\"\n",
                                "if [ ! -d \"$DIR\" ]; then\n",
                                "git clone https://github.com/mamvai/mysql-census-data.git\n",
                                "fi\n",
                                "cd mysql-census-data/\n",
                                "export PGPASSWORD=password\n",
                                "export ENDPOINT=",
                                {"Fn::GetAtt":["MySQLDB","Endpoint.Address"]},
                                "\n",
                                "nohup mysql -h ${ENDPOINT} -P 3306 -u admin -ppassword MySQLdatabase < create_census_table.sql\n",
                                "--//\n",
                                "\n"
                            ]
                        ]
                    }
                },
                "Monitoring": "false",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "EC2SampleRDSdata"
                    }
                ],
                "NetworkInterfaces": [
                    {
                        "DeleteOnTermination": "true",
                        "Description": "Primary network interface",
                        "DeviceIndex": 0,
                        "SubnetId": {
                            "Ref": "SubnetDB1"
                        },
                        "PrivateIpAddresses": [
                            {
                                "PrivateIpAddress": "10.100.25.42",
                                "Primary": "true"
                            }
                        ],
                        "GroupSet": [
                            {
                                "Ref": "SGDMS"
                            }
                        ],
                        "AssociatePublicIpAddress": "true"
                    }
                ]
            }
        },
        "SGDMS": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "EC2 Security Group",
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "gw1": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "InternetGatewayId": {
                    "Ref": "IGW"
                }
            }
        },
        "rtb0c3fae104a7b64456": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "DMSRT"
                    }
                ]
            }
        },
        "subnetroute1": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "rtb0c3fae104a7b64456"
                },
                "SubnetId": {
                    "Ref": "SubnetDB1"
                }
            }
        },
        "subnetroute2": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "rtb0c3fae104a7b64456"
                },
                "SubnetId": {
                    "Ref": "SubnetDB2"
                }
            }
        },
       
        "route1": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0",
                "RouteTableId": {
                    "Ref": "rtb0c3fae104a7b64456"
                },
                "GatewayId": {
                    "Ref": "IGW"
                }
            },
            "DependsOn": "gw1"
        },
        "dopt1cc25278": {
            "Type": "AWS::EC2::DHCPOptions",
            "Properties": {
                "DomainName": "ec2.internal",
                "DomainNameServers": [
                    "AmazonProvidedDNS"
                ]
            }
        },
        "dchpassoc1": {
            "Type": "AWS::EC2::VPCDHCPOptionsAssociation",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "DhcpOptionsId": {
                    "Ref": "dopt1cc25278"
                }
            }
        },
        "ingress1": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "SGDMS"
                },
                "IpProtocol": "tcp",
                "FromPort": "22",
                "ToPort": "22",
                "CidrIp": "0.0.0.0/0"
            }
        },
        "sgrdslaunchwizard2": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "RDS Security Group",
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "DMSRDS-SG"
                    }
                ]
            }
        },
       
        "ingress2": {
            "DependsOn": ["SGDMS"],
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "sgrdslaunchwizard2"
                },
                "IpProtocol": "tcp",
                "FromPort": "5432",
                "ToPort": "5432",
                "SourceSecurityGroupId": {
                    "Ref": "SGDMS"
                }
            }
        },
        "ingress3": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "sgrdslaunchwizard2"
                },
                "IpProtocol": "tcp",
                "FromPort": "5432",
                "ToPort": "5432",
                "CidrIp": "72.21.196.67/32"
            }
        },
        "S3Endpoint": {
            "Type": "AWS::EC2::VPCEndpoint",
            "Properties": {
               "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [{
                     "Effect": "Allow",
                     "Principal": "*",
                     "Action": ["*"],
                     "Resource": ["*"]
                  }]
               },
               "RouteTableIds": [{"Ref": "rtb0c3fae104a7b64456"}],
               "ServiceName": {"Fn::Sub": "com.amazonaws.${AWS::Region}.s3"},
               "VpcId": {"Ref": "VPC"}
            }
        },
        "egress1": {
            "Type": "AWS::EC2::SecurityGroupEgress",
            "Properties": {
                "GroupId": {
                    "Ref": "SGDMS"
                },
                "IpProtocol": "-1",
                "CidrIp": "0.0.0.0/0"
            }
        },
        "egress2": {
            "Type": "AWS::EC2::SecurityGroupEgress",
            "Properties": {
                "GroupId": {
                    "Ref": "sgrdslaunchwizard2"
                },
                "IpProtocol": "-1",
                "CidrIp": "0.0.0.0/0"
            }
        },
     
        "DataLakeAdministratorRole": 
        {
            "Type": "AWS::IAM::Role",
            "Properties": 
            {
                "AssumeRolePolicyDocument": 
                {
                    "Version": "2012-10-17",
                    "Statement": 
                    [
                        {
                            "Effect": "Allow",
                            "Principal": 
                            {   
                                "Service": "lakeformation.amazonaws.com" 
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Path": "/",
                "ManagedPolicyArns" : 
                [
                    "arn:aws:iam::aws:policy/AWSLakeFormationDataAdmin",
                    "arn:aws:iam::aws:policy/AWSGlueConsoleFullAccess",
                    "arn:aws:iam::aws:policy/CloudWatchLogsReadOnlyAccess",
                    "arn:aws:iam::aws:policy/AWSLakeFormationCrossAccountManager",
                    "arn:aws:iam::aws:policy/AmazonAthenaFullAccess"
                ],
                "Policies":
                [
                    {
                        "PolicyName": "DataLakeAdministratorInlinePolicy",
                        "PolicyDocument" : 
                        {
                            "Version": "2012-10-17",
                            "Statement": 
                            [
                                {
                                    "Effect": "Allow",
                                    "Action": "iam:CreateServiceLinkedRole",
                                    "Resource": "*",
                                    "Condition": 
                                    {
                                        "StringEquals": 
                                        {
                                            "iam:AWSServiceName": "lakeformation.amazonaws.com"
                                        }
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": 
                                    [
                                        "iam:PutRolePolicy"
                                    ],
                                    "Resource": "arn:aws:iam::259053958683:role/aws-service-role/lakeformation.amazonaws.com/AWSServiceRoleForLakeFormationDataAccess"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": 
                                    [
                                        "lakeformation:AddLFTagsToResource",
                                        "lakeformation:RemoveLFTagsFromResource",
                                        "lakeformation:GetResourceLFTags",
                                        "lakeformation:ListLFTags",
                                        "lakeformation:CreateLFTag",
                                        "lakeformation:GetLFTag",
                                        "lakeformation:UpdateLFTag",
                                        "lakeformation:DeleteLFTag",
                                        "lakeformation:SearchTablesByLFTags",
                                        "lakeformation:SearchDatabasesByLFTags"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": 
                                    [
                                        "iam:PassRole"
                                    ],
                                    "Resource": 
                                    [
                                        "arn:aws:iam::259053958683:role/workflow_role"
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": 
                                    [
                                        "ram:AcceptResourceShareInvitation",
                                        "ram:RejectResourceShareInvitation",
                                        "ec2:DescribeAvailabilityZones",
                                        "ram:EnableSharingWithAwsOrganization"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }   
                ]
            }
        },
        "DataLakeAnalystRole": 
        {
            "Type": "AWS::IAM::Role",
            "Properties": 
            {
                "AssumeRolePolicyDocument": 
                {
                    "Version": "2012-10-17",
                    "Statement": 
                    [
                        {
                            "Effect": "Allow",
                            "Principal": 
                            {
                                "Service": "lakeformation.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Path": "/",
                "ManagedPolicyArns" : 
                [
                    "arn:aws:iam::aws:policy/AmazonAthenaFullAccess"
                ],
                "Policies":
                [
                    {
                        "PolicyName": "DataLakeAnalystInlinePolicy",
                        "PolicyDocument" :
                        {
                            "Version": "2012-10-17",
                            "Statement": 
                            [
                                {
                                    "Effect": "Allow",
                                    "Action": 
                                    [
                                        "lakeformation:GetDataAccess",
                                        "glue:GetTable",
                                        "glue:GetTables",
                                        "glue:SearchTables",
                                        "glue:GetDatabase",
                                        "glue:GetDatabases",
                                        "glue:GetPartitions",
                                        "lakeformation:GetResourceLFTags",
                                        "lakeformation:ListLFTags",
                                        "lakeformation:GetLFTag",
                                        "lakeformation:SearchTablesByLFTags",
                                        "lakeformation:SearchDatabasesByLFTags"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },

        "GlueWorkflowRole":
        {
            "Type": "AWS::IAM::Role",
            "Properties": 
            {
                "AssumeRolePolicyDocument": 
                {
                    "Version": "2012-10-17",
                    "Statement": 
                    [
                        {
                            "Effect": "Allow",
                            "Principal": 
                            {
                                "Service": "glue.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Path": "/",
                "ManagedPolicyArns" : 
                [
                        "arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole",
                        "arn:aws:iam::aws:policy/AmazonS3FullAccess",
                        "arn:aws:iam::aws:policy/AmazonRDSReadOnlyAccess",
                        "arn:aws:iam::aws:policy/service-role/AWSLambdaRole"
                ],
                "Policies": 
                [
                    {
                        "PolicyName": "LakeFormationPolicy",
                        "PolicyDocument" :
                        {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "lakeformation:GetDataAccess",
                                        "lakeformation:GrantPermissions"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "iam:PassRole"
                                    ],
                                    "Resource": [
                                        "arn:aws:iam::615818682192:role/GlueWorkflowRole"
                                    ]
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "LambdaWorkflowRole": 
        {
            "Type": "AWS::IAM::Role",
            "Properties": 
            {
                "AssumeRolePolicyDocument": 
                {
                    "Version": "2012-10-17",
                    "Statement": 
                    [
                        {
                            "Effect": "Allow",
                            "Principal": 
                            {
                                "Service": "lambda.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Path": "/",
                "ManagedPolicyArns" : 
                [
                    "arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole"
                   
                ],
                "Policies": 
                [
                    {
                        "PolicyName": "WorkflowInlinePolicy",
                        "PolicyDocument" :
                        {
                            "Version": "2012-10-17",
                            "Statement": 
                            [
                                {
                                    "Effect": "Allow",
                                    "Action": 
                                    [
                                         "lakeformation:GetDataAccess",
                                         "lakeformation:GrantPermissions"
                                     ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": 
                                    [
                                        "iam:PassRole"
                                    ],
                                    "Resource": 
                                    [
                                        "arn:aws:iam::259053958683:role/workflow_role"
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": 
                                    [
                                        "s3:GetObject", "s3:ListBucket"
                                    ],
                                    "Resource": 
                                    [
                                        "arn:aws:s3:::dlrp-glue-scripts-us-east-1/*"
                                    ]
                                }
                            ]
                        }
                    }
                ]
            }
        },
       
        "GlueDatabaseMysql":
        {
            "Type": "AWS::Glue::Database",
            "Properties":
            {
                "CatalogId": {"Ref": "AWS::AccountId" },
                "DatabaseInput":
                {
                    "Name": "gluedatabasemysql-blogdb",
                    "Description": "AWS Glue container to hold metadata tables for the mysql crawler"
                }
            }
        },
        "DataLakeAdmin": {
            "Type": "AWS::LakeFormation::DataLakeSettings",
            "Properties": {
               "Admins": [
                  {
                     "DataLakePrincipalIdentifier": { "Fn::GetAtt" : [ "DataLakeAdministratorRole", "Arn" ] }
                  }
               ]
            }
         },
         "DataLakeBucketFormation": {
            "Type": "AWS::LakeFormation::Resource",
            "Properties": {
               "ResourceArn": { "Fn::GetAtt" : [ "ProcessedBucketS3", "Arn" ] },
               "RoleArn": { "Fn::GetAtt" : [ "GlueWorkflowRole", "Arn" ] },
               "UseServiceLinkedRole": false
            }
         },
         "DataLakeFormationDataLakeAdminPermission": {
            "Type": "AWS::LakeFormation::Permissions",
            "Properties": {
               "DataLakePrincipal": {
                  "DataLakePrincipalIdentifier": { "Fn::GetAtt" : [ "DataLakeAdministratorRole", "Arn" ] }
               },
               "Permissions": [
                  "ALL"
               ],
               "Resource": {
                  "DatabaseResource": {
                     "Name": {
                        "Ref": "GlueDatabaseMysql"
                     }
                  },
                  "DataLocationResource": {
                     "S3Resource": { "Fn::GetAtt" : [ "ProcessedBucketS3", "Arn" ] }
                  }
               }
            }
         },
         "DataLakeFormationGlueWorkflowRolePermission": {
            "Type": "AWS::LakeFormation::Permissions",
            "Properties": {
               "DataLakePrincipal": {
                  "DataLakePrincipalIdentifier": { "Fn::GetAtt" : [ "GlueWorkflowRole", "Arn" ] }
               },
               "Permissions": [
                  "ALL"
               ],
               "Resource": {
                  "DatabaseResource": {
                     "Name": {
                        "Ref": "GlueDatabaseMysql"
                     }
                  },
                  "DataLocationResource": {
                     "S3Resource": { "Fn::GetAtt" : [ "ProcessedBucketS3", "Arn" ] }
                  }
               }
            }
         },
        
        "DataLakeLocationPermission": {
                "Type": "AWS::LakeFormation::Permissions",
                "DependsOn": "DataLakeBucketFormation",
                "Properties": {
                   "DataLakePrincipal": {
                      "DataLakePrincipalIdentifier": { "Fn::GetAtt" : [ "GlueWorkflowRole", "Arn" ] }
                   },
                   "Permissions": [
                       "DATA_LOCATION_ACCESS"
                   ],
                   "Resource": {
                      "DataLocationResource": {
                         "S3Resource": { "Fn::GetAtt" : [ "ProcessedBucketS3", "Arn" ] }
                      }
                   }
                }
        }
        
    },
    "Outputs": 
    {
        "EC2Instance":{
            "Description": "EC2 Instance that loads sample data into RDS MySQL DB",
            "Value": 
            {
                "Ref": "EC2Instance"
            }

        },
        "RawBucketName": 
        {
            "Description": "This the bucket name of where your Raw data will be store at",
            "Value": 
            {
                "Ref": "RawBucketS3"
            }
        },
        "ProcessedBucketName": 
        {
            "Description": "This the bucket name of where your Processed data will be store at",
            "Value": 
            {
                "Ref": "ProcessedBucketS3"
            }
        },
       
        "RDSEndpointAddress":
        {
            "Description" : "RDS Endppint Address",
            "Value": {
                "Fn::GetAtt" : [ "MySQLDB", "Endpoint.Address" ]
           }
           
        },
        "RDSEndpointPort":
        {
            "Description" : "RDS Endppint Port",
            "Value": {
                "Fn::GetAtt" : [ "MySQLDB", "Endpoint.Port" ]
           }
           
        },
        "GlueRDSConnection": 
        {
            "Description": "This the Glue RDS Connection to load sample RDS MySQL data ",
            "Value": 
            {
                "Ref": "RDSConnectionMySQL"
            }
        },
        "DataLakeBucketFormation":{
            "Description": "This is the Lake Formation for the Data Lake",
            "Value": 
            {
                "Ref": "DataLakeBucketFormation"
            }

        }

    }
}