import sys
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from pyspark.context import SparkContext
from awsglue.context import GlueContext
from awsglue.job import Job

## @params: [JOB_NAME]
args = getResolvedOptions(sys.argv, ['JOB_NAME'])

sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)
job.init(args['JOB_NAME'], args)
## @type: DataSource
## @args: [database = "gluedatabasemysql-blogdb", table_name = "census_manufacturers_census_data", transformation_ctx = "datasource0"]
## @return: datasource0
## @inputs: []
datasource0 = glueContext.create_dynamic_frame.from_catalog(database = "gluedatabasemysql-blogdb", table_name = "census_manufacturers_census_data", transformation_ctx = "datasource0")
## @type: ApplyMapping
## @args: [mapping = [("payann_imp", "string", "payann_imp", "string"), ("benhea", "string", "benhea", "string"), ("cextot", "string", "cextot", "string"), ("benpec_s", "string", "benpec_s", "string"), ("pchadvt", "string", "pchadvt", "string"), ("invfine_s", "string", "invfine_s", "string"), ("cexbld", "string", "cexbld", "string"), ("pchcsvc", "string", "pchcsvc", "string"), ("year", "string", "year", "string"), ("cstmtot", "string", "cstmtot", "string"), ("rpbld_s", "string", "rpbld_s", "string"), ("pchrfus_s", "string", "pchrfus_s", "string"), ("id", "int", "id", "int"), ("elecgen", "string", "elecgen", "string"), ("cstmtot_s", "string", "cstmtot_s", "string"), ("benoth", "string", "benoth", "string"), ("elecgen_s", "string", "elecgen_s", "string"), ("pchdapr", "string", "pchdapr", "string"), ("cexmcha_s", "string", "cexmcha_s", "string"), ("invwipb", "string", "invwipb", "string"), ("pchtax_s", "string", "pchtax_s", "string"), ("benpeb", "string", "benpeb", "string"), ("benpec", "string", "benpec", "string"), ("cexmch", "string", "cexmch", "string"), ("pchrpr_s", "string", "pchrpr_s", "string"), ("benoth_s", "string", "benoth_s", "string"), ("invwipe", "string", "invwipe", "string"), ("invmate_s", "string", "invmate_s", "string"), ("pchcmpq_s", "string", "pchcmpq_s", "string"), ("invwipb_s", "string", "invwipb_s", "string"), ("pchoexp_s", "string", "pchoexp_s", "string"), ("rcptot_s", "string", "rcptot_s", "string"), ("rptot_s", "string", "rptot_s", "string"), ("pchadvt_s", "string", "pchadvt_s", "string"), ("benpeb_s", "string", "benpeb_s", "string"), ("pchprte", "string", "pchprte", "string"), ("naics2017_label", "string", "naics2017_label", "string"), ("cstrsl_s", "string", "cstrsl_s", "string"), ("rcptot", "string", "rcptot", "string"), ("subsector", "string", "subsector", "string"), ("invtote_s", "string", "invtote_s", "string"), ("naics2017", "string", "naics2017", "string"), ("hours_s", "string", "hours_s", "string"), ("benhea_s", "string", "benhea_s", "string"), ("cstfu_s", "string", "cstfu_s", "string"), ("pchrfus", "string", "pchrfus", "string"), ("cstfu", "string", "cstfu", "string"), ("naics2017_f", "string", "naics2017_f", "string"), ("pchtemp", "string", "pchtemp", "string"), ("pchtt", "string", "pchtt", "string"), ("indgroup", "string", "indgroup", "string"), ("rcptot_imp", "string", "rcptot_imp", "string"), ("payann", "string", "payann", "string"), ("invwipe_s", "string", "invwipe_s", "string"), ("pchcmpq", "string", "pchcmpq", "string"), ("cstelec_s", "string", "cstelec_s", "string"), ("invtotb_s", "string", "invtotb_s", "string"), ("pchcsvc_s", "string", "pchcsvc_s", "string"), ("emp_s", "string", "emp_s", "string"), ("cexmcho_s", "string", "cexmcho_s", "string"), ("rptot", "string", "rptot", "string"), ("emp_imp", "string", "emp_imp", "string"), ("rpbld", "string", "rpbld", "string"), ("invfinb", "string", "invfinb", "string"), ("invfine", "string", "invfine", "string"), ("pchexso_s", "string", "pchexso_s", "string"), ("valadd", "string", "valadd", "string"), ("pchdapr_s", "string", "pchdapr_s", "string"), ("payanpw", "string", "payanpw", "string"), ("payanpw_s", "string", "payanpw_s", "string"), ("payann_s", "string", "payann_s", "string"), ("cexmcho", "string", "cexmcho", "string"), ("emp", "string", "emp", "string"), ("pchrpr", "string", "pchrpr", "string"), ("cstmprt", "string", "cstmprt", "string"), ("cexmchc_s", "string", "cexmchc_s", "string"), ("name", "string", "name", "string"), ("empq1pw", "string", "empq1pw", "string"), ("indlevel", "string", "indlevel", "string"), ("elecpch", "string", "elecpch", "string"), ("cextot_s", "string", "cextot_s", "string"), ("benefit_s", "string", "benefit_s", "string"), ("cexmchc", "string", "cexmchc", "string"), ("pchprte_s", "string", "pchprte_s", "string"), ("cexmcha", "string", "cexmcha", "string"), ("pchtemp_s", "string", "pchtemp_s", "string"), ("cstcnt_s", "string", "cstcnt_s", "string"), ("payqtr1_s", "string", "payqtr1_s", "string"), ("cstrsl", "string", "cstrsl", "string"), ("cstelec", "string", "cstelec", "string"), ("valadd_s", "string", "valadd_s", "string"), ("elecsld", "string", "elecsld", "string"), ("invfinb_s", "string", "invfinb_s", "string"), ("elecpch_s", "string", "elecpch_s", "string"), ("cexmch_s", "string", "cexmch_s", "string"), ("rpmch_s", "string", "rpmch_s", "string"), ("elecsld_s", "string", "elecsld_s", "string"), ("invtote", "string", "invtote", "string"), ("pchexso", "string", "pchexso", "string"), ("geo_id_f", "string", "geo_id_f", "string"), ("rpmch", "string", "rpmch", "string"), ("invtotb", "string", "invtotb", "string"), ("pchoexp", "string", "pchoexp", "string"), ("payqtr1", "string", "payqtr1", "string"), ("pchtax", "string", "pchtax", "string"), ("sector", "string", "sector", "string"), ("cstcnt", "string", "cstcnt", "string"), ("empq1pw_s", "string", "empq1pw_s", "string"), ("pchtt_s", "string", "pchtt_s", "string"), ("geo_id", "string", "geo_id", "string"), ("invmatb_s", "string", "invmatb_s", "string"), ("benefit", "string", "benefit", "string"), ("invmatb", "string", "invmatb", "string"), ("hours", "string", "hours", "string"), ("cstmprt_s", "string", "cstmprt_s", "string"), ("cexbld_s", "string", "cexbld_s", "string"), ("invmate", "string", "invmate", "string")], transformation_ctx = "applymapping1"]
## @return: applymapping1
## @inputs: [frame = datasource0]
#applymapping1 = ApplyMapping.apply(frame = datasource0, mappings = [("payann_imp", "string", "payann_imp", "string"), ("benhea", "string", "benhea", "string"), ("cextot", "string", "cextot", "string"), ("benpec_s", "string", "benpec_s", "string"), ("pchadvt", "string", "pchadvt", "string"), ("invfine_s", "string", "invfine_s", "string"), ("cexbld", "string", "cexbld", "string"), ("pchcsvc", "string", "pchcsvc", "string"), ("year", "string", "year", "string"), ("cstmtot", "string", "cstmtot", "string"), ("rpbld_s", "string", "rpbld_s", "string"), ("pchrfus_s", "string", "pchrfus_s", "string"), ("id", "int", "id", "int"), ("elecgen", "string", "elecgen", "string"), ("cstmtot_s", "string", "cstmtot_s", "string"), ("benoth", "string", "benoth", "string"), ("elecgen_s", "string", "elecgen_s", "string"), ("pchdapr", "string", "pchdapr", "string"), ("cexmcha_s", "string", "cexmcha_s", "string"), ("invwipb", "string", "invwipb", "string"), ("pchtax_s", "string", "pchtax_s", "string"), ("benpeb", "string", "benpeb", "string"), ("benpec", "string", "benpec", "string"), ("cexmch", "string", "cexmch", "string"), ("pchrpr_s", "string", "pchrpr_s", "string"), ("benoth_s", "string", "benoth_s", "string"), ("invwipe", "string", "invwipe", "string"), ("invmate_s", "string", "invmate_s", "string"), ("pchcmpq_s", "string", "pchcmpq_s", "string"), ("invwipb_s", "string", "invwipb_s", "string"), ("pchoexp_s", "string", "pchoexp_s", "string"), ("rcptot_s", "string", "rcptot_s", "string"), ("rptot_s", "string", "rptot_s", "string"), ("pchadvt_s", "string", "pchadvt_s", "string"), ("benpeb_s", "string", "benpeb_s", "string"), ("pchprte", "string", "pchprte", "string"), ("naics2017_label", "string", "naics2017_label", "string"), ("cstrsl_s", "string", "cstrsl_s", "string"), ("rcptot", "string", "rcptot", "string"), ("subsector", "string", "subsector", "string"), ("invtote_s", "string", "invtote_s", "string"), ("naics2017", "string", "naics2017", "string"), ("hours_s", "string", "hours_s", "string"), ("benhea_s", "string", "benhea_s", "string"), ("cstfu_s", "string", "cstfu_s", "string"), ("pchrfus", "string", "pchrfus", "string"), ("cstfu", "string", "cstfu", "string"), ("naics2017_f", "string", "naics2017_f", "string"), ("pchtemp", "string", "pchtemp", "string"), ("pchtt", "string", "pchtt", "string"), ("indgroup", "string", "indgroup", "string"), ("rcptot_imp", "string", "rcptot_imp", "string"), ("payann", "string", "payann", "string"), ("invwipe_s", "string", "invwipe_s", "string"), ("pchcmpq", "string", "pchcmpq", "string"), ("cstelec_s", "string", "cstelec_s", "string"), ("invtotb_s", "string", "invtotb_s", "string"), ("pchcsvc_s", "string", "pchcsvc_s", "string"), ("emp_s", "string", "emp_s", "string"), ("cexmcho_s", "string", "cexmcho_s", "string"), ("rptot", "string", "rptot", "string"), ("emp_imp", "string", "emp_imp", "string"), ("rpbld", "string", "rpbld", "string"), ("invfinb", "string", "invfinb", "string"), ("invfine", "string", "invfine", "string"), ("pchexso_s", "string", "pchexso_s", "string"), ("valadd", "string", "valadd", "string"), ("pchdapr_s", "string", "pchdapr_s", "string"), ("payanpw", "string", "payanpw", "string"), ("payanpw_s", "string", "payanpw_s", "string"), ("payann_s", "string", "payann_s", "string"), ("cexmcho", "string", "cexmcho", "string"), ("emp", "string", "emp", "string"), ("pchrpr", "string", "pchrpr", "string"), ("cstmprt", "string", "cstmprt", "string"), ("cexmchc_s", "string", "cexmchc_s", "string"), ("name", "string", "name", "string"), ("empq1pw", "string", "empq1pw", "string"), ("indlevel", "string", "indlevel", "string"), ("elecpch", "string", "elecpch", "string"), ("cextot_s", "string", "cextot_s", "string"), ("benefit_s", "string", "benefit_s", "string"), ("cexmchc", "string", "cexmchc", "string"), ("pchprte_s", "string", "pchprte_s", "string"), ("cexmcha", "string", "cexmcha", "string"), ("pchtemp_s", "string", "pchtemp_s", "string"), ("cstcnt_s", "string", "cstcnt_s", "string"), ("payqtr1_s", "string", "payqtr1_s", "string"), ("cstrsl", "string", "cstrsl", "string"), ("cstelec", "string", "cstelec", "string"), ("valadd_s", "string", "valadd_s", "string"), ("elecsld", "string", "elecsld", "string"), ("invfinb_s", "string", "invfinb_s", "string"), ("elecpch_s", "string", "elecpch_s", "string"), ("cexmch_s", "string", "cexmch_s", "string"), ("rpmch_s", "string", "rpmch_s", "string"), ("elecsld_s", "string", "elecsld_s", "string"), ("invtote", "string", "invtote", "string"), ("pchexso", "string", "pchexso", "string"), ("geo_id_f", "string", "geo_id_f", "string"), ("rpmch", "string", "rpmch", "string"), ("invtotb", "string", "invtotb", "string"), ("pchoexp", "string", "pchoexp", "string"), ("payqtr1", "string", "payqtr1", "string"), ("pchtax", "string", "pchtax", "string"), ("sector", "string", "sector", "string"), ("cstcnt", "string", "cstcnt", "string"), ("empq1pw_s", "string", "empq1pw_s", "string"), ("pchtt_s", "string", "pchtt_s", "string"), ("geo_id", "string", "geo_id", "string"), ("invmatb_s", "string", "invmatb_s", "string"), ("benefit", "string", "benefit", "string"), ("invmatb", "string", "invmatb", "string"), ("hours", "string", "hours", "string"), ("cstmprt_s", "string", "cstmprt_s", "string"), ("cexbld_s", "string", "cexbld_s", "string"), ("invmate", "string", "invmate", "string")], transformation_ctx = "applymapping1")
## @type: DataSink
## @args: [connection_type = "s3", connection_options = {"path": "s3://dlrp-neast1-raw-zone"}, format = "json", transformation_ctx = "datasink2"]
## @return: datasink2
## @inputs: [frame = applymapping1]
#datasource0.printSchema()
#print datasource0.count()
datasink2 = glueContext.write_dynamic_frame.from_options(frame = datasource0, connection_type = "s3", connection_options = 
                                                                {"path": "s3://dlrp-neast1-curated-zone/census/manufacturers_census_data"}, 
                                                                format = "parquet", transformation_ctx = "datasink2")
job.commit()